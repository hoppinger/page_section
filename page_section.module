<?php

/**
 * @file
 * Provide Page section field and entity.
 */

define('PAGE_SECTION_NOT_SAVED', 0x0000);
define('PAGE_SECTION_CODE', 0x0001);
define('PAGE_SECTION_DATABASE', 0x0002);
define('PAGE_SECTION_OVERRIDE', PAGE_SECTION_CODE | PAGE_SECTION_DATABASE);

// Load all Field module hooks for Page Section.
require_once drupal_get_path('module', 'page_section') . '/page_section.field.inc';

/**
 * Implements hook_menu().
 */
function page_section_menu() {
  $items = array();

  $items['admin/structure/page-sections'] = array(
    'title' => 'Page sections',
    'description' => 'Manage page section types',
    'page callback' => 'page_section_overview_types',
    'access arguments' => array('administer page section types'),
    'file' => 'page_section.admin.inc',
  );
  $items['admin/structure/page-sections/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/structure/page-sections/add'] = array(
    'title' => 'Add page section type',
    'page callback' => 'page_section_type_add_page',
    'access arguments' => array('administer page section types'),
    'file' => 'page_section.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/page-sections/manage/%page_section_type'] = array(
    'title' => 'Edit page section type',
    'title callback' => 'page_section_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'page_section_type_page',
    'page arguments' => array(4),
    'access arguments' => array('administer page section types'),
    'file' => 'page_section.admin.inc',
  );
  $items['admin/structure/page-sections/manage/%page_section_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function page_section_theme() {
  return array(
    'page_section' => array(
      'render element' => 'elements',
      'template' => 'page-section',
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function page_section_entity_info() {
  $entities = array();

  $entities['page_section'] = array(
    'label' => t('Page section'),
    'controller class' => 'EntityAPIController',
    'base table' => 'page_section',
    'uri callback' => 'page_section_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'sid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (page_section_type_info() as $type => $info) {
    $entities['page_section']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/page-sections/manage/%page_section_type',
        'real path' => 'admin/structure/page-sections/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer page section types'),
      ),
    );
  }

  return $entities;
}

/**
 * Get all page section types.
 */
function page_section_type_info($reset = FALSE) {
  $info = &drupal_static('page_section_type_info');

  if ($reset || !isset($info)) {
    if (!$reset && ($cache = cache_get('page_section_type_info'))) {
      $info = $cache->data;
    }

    if ($reset || !isset($info)) {
      $info = _page_section_type_info();
      cache_set('page_section_type_info', $info);
    }
  }

  return $info;
}

/**
 * Internal function to construct the list of available Page Section types.
 */
function _page_section_type_info() {
  $info = array();

  foreach (module_implements('page_section_type_info') as $module) {
    $result = module_invoke($module, 'page_section_type_info');
    if (empty($result)) {
      continue;
    }
    foreach ($result as $name => $_info) {
      $_info['name'] = $name;
      $_info['module'] = $module;
      $_info['status'] = PAGE_SECTION_CODE;
      $_info['weight'] = !empty($_info['weight']) ? $_info['weight'] : 0;
      $info[$name] = (object) $_info;
    }
  }

  $result = db_select('page_section_type', 't')
    ->fields('t')
    ->execute();
  foreach ($result as $row) {
    $info[$row->name] = (object) array(
      'name' => $row->name,
      'label' => $row->label,
      'module' => 'page_section',
      'status' => isset($info[$row->name]) ? PAGE_SECTION_OVERRIDE : PAGE_SECTION_DATABASE,
      'weight' => 0,
    );
  }

  drupal_alter('page_section_type_info', $info);

  uasort($info, '_page_section_type_info_sort_weight');

  return $info;
}

function _page_section_type_info_sort_weight($a, $b) {
  $a_weight = isset($a->weight) ? $a->weight : 0;
  $b_weight = isset($b->weight) ? $b->weight : 0;
  
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Menu load callback. Page section type.
 */
function page_section_type_load($key) {
  $types = page_section_type_info();
  $key = strtr($key, array('-' => '_'));

  return isset($types[$key]) ? $types[$key] : FALSE;
}

/**
 * Menu title callback. Page section type.
 */
function page_section_type_page_title($type) {
  return $type->label;
}

/**
 * Save Page Section Type to the database.
 */
function page_section_type_save($type) {
  if ($type->status & PAGE_SECTION_DATABASE) {
    drupal_write_record('page_section_type', $type, array('name'));
  }
  else {
    drupal_write_record('page_section_type', $type);
    $type->status |= PAGE_SECTION_DATABASE;
  }

  // Reset the cache.
  page_section_type_info(TRUE);
  menu_rebuild();
}

/**
 * Loads Page section entities from the database.
 */
function page_section_load_multiple($sids) {
  return entity_load('page_section', $sids);
}

/**
 * Loads a Page section entity from the database.
 */
function page_section_load($sid) {
  $sections = page_section_load_multiple(array($sid));
  return $sections ? reset($sections) : FALSE;
}

/**
 * Saves a Page section entity to the database.
 */
function page_section_save($section) {
  if (empty($section->created)) {
    $section->created = REQUEST_TIME;
  }
  $section->changed = REQUEST_TIME;

  return entity_save('page_section', $section);
}

/**
 * Removes Page section entities from the database.
 */
function page_section_delete_multiple($sids) {
  return entity_delete_multiple('page_section', $sids);
}

/**
 * Removes a Page section entity from the database.
 */
function page_section_delete($sid) {
  return entity_delete('page_section', $sid);
}

/**
 * Renders a Page Section entity.
 */
function page_section_view($section, $view_mode = 'full', $page = NULL) {
  return entity_view('page_section', array($section), $view_mode);
}

/**
 * Renders Page Section entities.
 */
function page_section_view_multiple($sections, $view_mode = 'full', $page = NULL) {
  return entity_view('page_section', $sections, $view_mode, NULL, $page);
}

/**
 * Creates a new Page Section entity.
 */
function page_section_create($values) {
  $result = entity_create('page_section', $values);
  return $result;
}

/**
 * Implements hook_page_section_view().
 */
function page_section_page_section_view($entity, $view_mode, $langcode) {
  $entity->content['#theme'] = 'page_section';
}

/**
 * Determine if a Page Section is empty.
 */
function page_section_section_is_empty($section) {
  $result = module_invoke_all('page_section_is_empty', $section);
  if (in_array(FALSE, $result)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_page_section_is_empty().
 */
function page_section_page_section_is_empty($section) {
  $instances = field_info_instances('page_section', $section->type);

  if (empty($instances)) {
    return FALSE; // If there are no fields in the page section, we want to continue
  }

  foreach ($instances as $instance) {
    $field_name = $instance['field_name'];
    $field = field_info_field($field_name);

    // Determine the list of languages to iterate on.
    $languages = field_available_languages('page_section', $field);

    foreach ($languages as $langcode) {
      if (!empty($section->{$field_name}[$langcode])) {
        // If at least one section-field is not empty; the
        // page section is not empty.
        foreach ($section->{$field_name}[$langcode] as $field_item) {
          if (!module_invoke($field['module'], 'field_is_empty', $field_item, $field)) {
            return FALSE;
          }
        }
      }
    }
  }

  return TRUE;
}

/**
 * Processes variables for page-section.tpl.php.
 */
function template_preprocess_page_section(&$variables) {
  $page_section = $variables['page_section'] = $variables['elements']['#entity'];
  $page_section_wrapper = $variables['page_section_wrapper'] = entity_metadata_wrapper('page_section', $variables['page_section']);

  $variables['content'] = array();
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['classes_array'][] = drupal_html_class('page_section_' . $page_section->type);

  // Add suggestions.
  $variables['theme_hook_suggestions'][] = 'page_section__' . $page_section->type;
}
